package main.com.app.entities;

import java.util.List;

public class Predator extends Creature {
    private final int attackPower;

    public Predator(Point point, Class typeOfPrey) {
        super(point, typeOfPrey);
        attackPower = 1;
    }

    @Override
    public void makeMove(WorldMap worldMap) {
        List<Point> path = pathToNearestPrey(worldMap);

        // –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ —à–ª—è—Ö, –ø–µ—Ä–µ—Å—É–≤–∞—Ç–∏ —Ö–∏–∂–∞–∫–∞
        if (isValidPath(path)) {
            Point nextPoint = path.get(1);
            // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —Ç–æ—á–∫–∞ —î –ø–æ–∑–∏—Ü—ñ—î—é –∑–¥–æ–±–∏—á—ñ
            Entity prey = worldMap.getEntityByPoint(nextPoint);
            if (isValidPrey(prey)) {
                System.out.println("–¢–∏—Ü—å–Ω—É–≤ —Ç—Ä–∞–≤–æ—ó–¥–Ω–æ–≥–æ!");
                ((Creature) prey).setHealthPoint(((Creature) prey).getHealthPoint() - attackPower);
                if (((Creature) prey).getHealthPoint() <= 0){
                    worldMap.removeEntityByPoint(nextPoint);
                    worldMap.updateEntityPosition(this.point, nextPoint);
                    System.out.println("–í–±–∏—Ç–æ —Ç—Ä–∞–≤–æ—ó–¥–Ω–æ–≥–æ!");
                }
            } else {
                System.out.println("–Ø –Ω–µ –±—ñ–ª—è —Ü—ñ–ª—ñ, –π–¥—É –¥–∞–ª—ñ");
                worldMap.updateEntityPosition(this.point, nextPoint);
            }
        } else {
            System.out.println("–Ø –≤–∂–µ –≤—Å—ñ—Ö –∑—ó–≤, –Ω—è–º!");
        }
    }

    @Override
    public Class<? extends Entity> getTypeOfPrey() {
        return Herbivore.class;
    }

    @Override
    public String toString() {
        return "\uD83D\uDC3A"; // üê∫
    }
}
